plugins {
    id 'java'
    id 'jacoco'
    id 'application'
    id 'org.graalvm.buildtools.native' version '0.9.25'
}

group = 'com.haubir'

repositories {
    mavenCentral()
}

graalvmNative {
    toolchainDetection = false
    binaries {
        main {
            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(20)
                vendor = JvmVendorSpec.matching("GraalVM Community")
            }
            verbose = true
            sharedLibrary = false
            quickBuild = true
            jvmArgs.add("-Djava.awt.headless=false")
            jvmArgs.add("--enable-preview")
            buildArgs.add("--enable-url-protocols=https")
            buildArgs.add("--initialize-at-build-time=org.slf4j.LoggerFactory")
            buildArgs.add("--initialize-at-build-time=org.slf4j.simple.SimpleLogger")
            buildArgs.add("--initialize-at-build-time=org.slf4j.impl.StaticLoggerBinder")
        }
    }
}

dependencies {
    // PicoCLI, see https://picocli.info
    implementation 'info.picocli:picocli:4.7.5'
    annotationProcessor 'info.picocli:picocli-codegen:4.7.5'

    // jline, interactive shell stuff, see https://github.com/jline/jline3
    implementation 'org.jline:jline:3.23.0'

    // Http client
    implementation 'org.apache.httpcomponents.client5:httpclient5-fluent:5.2.1'

    // Logger
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'org.slf4j:slf4j-nop:2.0.9'

    // JSON serialization/deserialization without reflection
    annotationProcessor platform('io.micronaut.platform:micronaut-platform:4.1.0')
    implementation platform('io.micronaut.platform:micronaut-platform:4.1.0')
    annotationProcessor 'io.micronaut.serde:micronaut-serde-processor'
    annotationProcessor 'io.micronaut:micronaut-inject-java'
    implementation 'io.micronaut.serde:micronaut-serde-jackson'

    // Testing
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

application {
    mainClassName = 'com.haubir.nativeimage.cli.Main'
}

jar {
    duplicatesStrategy = 'warn'
    manifest {
        attributes(
                'Main-Class': application.mainClass
        )
    }

    from sourceSets.main.output
    from {
        configurations.compileClasspath.collect {it.isDirectory() ? it : zipTree(it)}
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

test {
    useJUnitPlatform()
    jvmArgs(['--enable-preview'])
}

tasks.withType(JavaCompile).each {
    it.options.compilerArgs.add('--enable-preview')
}